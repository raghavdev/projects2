<?php

/**
 * Implements hook_menu().
 *
 */
function unfi_reports_cmp_report_menu() {
  // Create a page to manually run the report.
  $items['reports/cmp_report'] = array(
    'title'            => t('CMP Products Report'),
    'description'      => t('Search for products uploaded to CMP.'),
    'page callback'    => 'unfi_reports_cmp_report',
    'access callback'  => 'unfi_reports_user_access',
    'access arguments' => array('access unfi cmp report'),
  );
  // Create a settings page.
  $items['admin/config/unfi_reports/cmp_report_settings'] = array(
    'title'            => t('CMP Products Report Settings'),
    'description'      => t('Configure the CMP product report settings.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('unfi_reports_cmp_report_settings_form'),
    'access callback'  => 'unfi_reports_user_access',
    'access arguments' => array('access unfi cmp report'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function unfi_reports_cmp_report_permission() {
  return array(
    'access unfi cmp report' => array(
      'title'           => t('Access UNFI CMP Products Report'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_cron().
 */
function unfi_reports_cmp_report_cron() {
  if (unfi_reports_check_cron_report_status('unfi_reports_cmp_report')) {
    $cron_vars = variable_get('unfi_reports_cmp_report_cron_info', array());
    unfi_reports_set_background_process('unfi_reports_cmp_report', $cron_vars['recipient'], $cron_vars['filter_params'], $cron_vars['download_type']);
  }
}

/**
 * Display the form page that allows the user to set some filtering options.
 */
function unfi_reports_cmp_report() {
  return drupal_get_form('unfi_reports_form', unfi_reports_cmp_report_params());
}

/**
 * Permit access to report files if the user has access permissions for this module.
 */
function unfi_reports_cmp_report_file_download($uri) {
  $params    = unfi_reports_cmp_report_params();
  $path_info = unfi_reports_build_download_path($params);

  if (drupal_dirname($uri) == $path_info['export_path']) {
    if (unfi_reports_user_access('access unfi cmp report')) {
      return array('Content-Type' => file_get_mimetype($uri));
    }
    else {
      return -1;
    }
  }
}

/**
 * Parse the filter params so that they can be used.
 */
function unfi_reports_cmp_report_parse_filters($filters) {
  $parsed = unfi_reports_parse_filters($filters);

  // The shared parse filters function will do most of the work, but additional adjustments can be done here.

  return $parsed;
}

/**
 * Return an array of params that will be used to build the filters form.
 */
function unfi_reports_cmp_report_params() {
  $params = array(
    'label'            => 'CMP Products Report',
    'module_name'      => 'unfi_reports_cmp_report',
    'processor'        => 'unfi_reports_cmp_report_run',
    'destination_path' => 'cmp_report',
    'filename_prefix'  => 'cmp_report',  // NULL to use module_name.
    'columns'          => array(
      'name'      => 'Product Name',
      'upc'       => 'UPC',
      'east_id'   => 'Product East ID',
      'west_id'   => 'Product West ID',
      'timestamp' => array(
        'format' => 'unfi_reports_datetime_format',  // note: try to do formatting in SQL if possible, formatters work, but will ding performance.
        'name'   => 'Upload Date',
      ),
    ),
    'filter_params' => array(
      'range' => array(
        'title'          => 'Uploaded Within: ',
        'description'    => '',
        'default_preset' => 'last_6_months',  // NULL to use reports default
        'range_start'    => NULL,   // NULL to use reports default
      ),
    ),
  );

  return $params;
}

/**
 * Execute the report.
 */
function unfi_reports_cmp_report_run($filter_args, $page) {

  $params = array('pagination' => FAlSE,);

  if ($page >= 0) {
    $params['pagination']['per_page'] = variable_get('unfi_reports_results_per_page', 100);
    $params['pagination']['cur_page'] = $page;
  }

  $results = array('total' => 0, 'results' => array());

  $where = "
  WHERE
    log.upc IS NOT NULL
  ";

  if (!empty($filter_args['range_preset']['range']['start_timestamp']) && is_numeric($filter_args['range_preset']['range']['start_timestamp'])) {
    $where .= " AND log.timestamp > {$filter_args['range_preset']['range']['start_timestamp']} ";
  }

  if (!empty($filter_args['range_preset']['range']['end_timestamp']) && is_numeric($filter_args['range_preset']['range']['end_timestamp'])) {
    $where .= " AND log.timestamp < {$filter_args['range_preset']['range']['end_timestamp']} ";
  }

  // Fetch the total rows.
  $total_sql = "SELECT
    log.upc
  FROM digital_core_cmp_product_log log ";

  $total_sql .= $where;

  $total_result = db_query($total_sql);
  $results['total'] = $total_result->rowCount();

  unset($total_sql, $total_result);

  // Now fetch the real data.
  $sql = "SELECT
    log.name,
    log.upc,
    log.east_id,
    log.west_id,
    log.timestamp
  FROM digital_core_cmp_product_log log ";

  $sql .= $where;

  $sql .= "
  ORDER BY
    log.timestamp ASC";

  if (!empty($params['pagination'])) {
    $sql .= ' LIMIT ' . $params['pagination']['per_page'];
    if ($params['pagination']['cur_page'] > 0) {
      $sql .= ' OFFSET ' . ($params['pagination']['cur_page'] * $params['pagination']['per_page']);
    }
  }

  $query_result = db_query($sql);

  // Remove each.
  while($row = $query_result->fetchAssoc()) {
    $results['results'][] = $row;
  }

  unset($query_result);

  return $results;
}

/**
 * Settings page for CMP product report settings.
 */
function unfi_reports_cmp_report_settings_form($form, &$form_state) {
  $var = variable_get('unfi_reports_cmp_report_cron_info', array(
    'enabled'       => '0',
    'recipient'     => '',
    'filter_params' => '',
    'download_type' => 'csv',
    'interval'      => '',
  ));

  $form['unfi_reports_cmp_report_cron_info'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Background Report Settings'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#tree'        => TRUE,
  );

  $form['unfi_reports_cmp_report_cron_info']['enabled'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Enable'),
    '#default_value' => $var['enabled'],
  );

  $form['unfi_reports_cmp_report_cron_info']['recipient'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Recipient(s)'),
    '#default_value' => $var['recipient'],
    '#description'   => unfi_reports_cron_setting_descriptions('recipient'),
  );

  $form['unfi_reports_cmp_report_cron_info']['filter_params'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Filter Parameter(s)'),
    '#default_value' => $var['filter_params'],
    '#description'   => unfi_reports_cron_setting_descriptions('filter_params'),
  );

  $form['unfi_reports_cmp_report_cron_info']['download_type'] = array(
    '#type'          => 'select',
    '#title'         => t('File Type'),
    '#options'       => unfi_reports_download_options(),
    '#default_value' => $var['download_type'],
  );

  $form['unfi_reports_cmp_report_cron_info']['interval'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Run Interval'),
    '#default_value' => $var['interval'],
    '#description'   => unfi_reports_cron_setting_descriptions('interval'),
  );

  return system_settings_form($form);
}

/**
 * Form API validation of user input
 */
function unfi_reports_cmp_report_settings_form_validate($form, &$form_state) {
  if (
    isset($form_state['values']['unfi_reports_cmp_report_cron_info']['interval']) 
    && $form_state['values']['unfi_reports_cmp_report_cron_info']['interval'] != ''
  ) {
    if (strtotime($form_state['values']['unfi_reports_cmp_report_cron_info']['interval']) === FALSE) {
      form_set_error('unfi_reports_cmp_report_cron_info][interval', t('Run Interval is not a valid format.'));
    }
    elseif (strtotime($form_state['values']['unfi_reports_cmp_report_cron_info']['interval']) >= REQUEST_TIME) {
      form_set_error('unfi_reports_cmp_report_cron_info][interval', t('Run Interval should be a relative time in the past.'));
    }
  }
}
