<?php

/*
 * EIW Connect
 *
 * Function:
 * Facilitates the connection and communication between the EIW servers and drupal
 * Requests new data from EIW
 * Processes said data
 * fills out the staging tables
 * Processes the data from the staging into the live data living inside drupal
 *
 */

/**
 * Implements hook_rules_action_info().
 */
function eiw_connect_rules_action_info() {
  $actions = array(
    'eiw_connect_sync_data' => array(
      'label' => t('Pull new data from EIW database'),
      'group' => t('EIW'),
      'parameter' => array(
          'eiw_table' => array(
            'type' => 'text',
            'label' => 'EIW table'
          ),
          'key_field' => array(
            'type' => 'text',
            'label' => 'Key Field'
          ),
          'dest_table' => array(
            'type' => 'text',
            'label' => 'Destination Table'
          ),
      ),
    ),
    'eiw_connect_process_data' => array(
      'label' => t('Process EIW Data'),
      'group' => t('EIW'),
      'parameter' => array(
          'data_type' => array(
            'type' => 'text',
            'label' => 'Data Type'
          ),
      ),
    ),
  );
  return $actions;
}

/**
 * Implements hook_menu().
 *
 */
function eiw_connect_menu() {

  $items = array();

  // Create an administration block for the module and any submodules.
  $items['admin/config/digitalcore/eiw'] = array(
    'title' => t('EIW Connect'),
    'description' => t('Configure the EIW data store integration.'),
    'position' => 'right',
    'weight' => 21,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('manage eiw connect'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

   // Create the main settings page.
  $items['admin/config/digitalcore/eiw/settings'] = array(
    'title' => t('Integration Settings'),
    'description' => t('Configure the connection information and settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eiw_connect_form'),
    'access arguments' => array('manage eiw connect'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Create the main settings tab
  $items['admin/config/digitalcore/eiw/settings/config'] = array(
    'title' => t('Settings'),
    'description' => t('Configure the connection information and settings.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Create the confirmation tab.
  $items['admin/config/digitalcore/eiw/settings/db_test'] = array(
    'title' => t('Connection Test Page'),
    'description' => t('Confirm that the database connection is successful.'),
    'page callback' => 'db_test_page',
    'access arguments' => array('manage eiw connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );


  $items['admin/config/services/digitalcore/mapping'] = array(
    'title' => "Digital Core Mapping",
    'description' => "Admin links to the digital core mapping pages",
    'page callback' => 'eiw_connect_mapping_admin',
    'access callback' => 'user_access',
    'access arguments' => array('administer eiw field mapping'),
    'type' => MENU_NORMAL_ITEM,
  );

  //Field mapping
  $items['admin/config/digitalcore/eiw/staging/mapping/%'] = array(
    'page callback' => 'eiw_connect_staging_mapping',
    'access arguments' => array('administer eiw field mapping'),
    'access callback' => 'user_access',
    'page arguments' => array(6),
    'title' => 'EIW data field mapping',
    'type' => MENU_NORMAL_ITEM,
  );

  //Allow upload of csv eiw_product csv
  $items['admin/config/digitalcore/eiw/csv/upload/%'] = array(
    'page callback' => 'eiw_connect_csv_upload',
    'access arguments' => array('access eiw csv upload'),
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/digitalcore/eiw/csv/mapping/%'] = array (
    'title' => 'EIW Data CSV Column Mapping',
    'page callback' => 'eiw_connect_csv_mapping',
    'access arguments' => array('access eiw csv upload'),
    'access callback' => 'user_access',
    'page arguments' => array(6),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/digitalcore/eiw/field_group/mapping/%'] = array (
    'title' => 'Field Group Mapping',
    'page callback' => 'eiw_connect_field_group_mapping',
    'access arguments' => array('administer eiw field mapping'),
    'access callback' => 'user_access',
    'page arguments' => array(6),
    'type' => MENU_CALLBACK,
  );

  //TODO REMOVE THESE 2 Callbacks, they are just for easier testing
  $items['service/digitalcore/eiw/process/%'] = array(
    'page callback' => 'eiw_connect_process_data',
    'access callback' => true,
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  );

  $items['service/digitalcore/eiw/sync/%/%/%'] = array(
    'page callback' => 'eiw_connect_sync_data',
    'access callback' => true,
    'page arguments' => array(4, 5, 6),
    'type' => MENU_CALLBACK,
  );

//uncomment if we need this again
//  $items['category_product_fix'] = array(
//    'page callback' => 'category_product_fix',
//    'access callback' => true,
//    'type' => MENU_CALLBACK,
//  );

  return $items;
}

function category_product_fix () {

  module_load_include('inc', 'digital_core_data', 'digital_core_data_rcm_categories');

  //pull up the products, call the relation function

  $products = db_select("digital_core_data_products")
                ->fields("digital_core_data_products", array("RetailCatLinkSid", "ProductSid"))
                ->execute()
                ->fetchAll();

  //assign the products
  digitial_core_data_rcm_categories_relate_products($products);
}
/**
 * Implements hook_permission().
 */
function eiw_connect_permission() {
  return array(
    'administer eiw connection' =>  array(
      'title' => t('Administer EIW Connection'),
      'restrict access' => TRUE,
    ),
    'administer eiw field mapping' => array(
      'title' => t('Administer EIW Field Mapping'),
      'restrict access' => TRUE,
    ),
    'access eiw csv upload' => array(
      'title' => t('Access EIW CSV Upload'),
      'restrict access' => TRUE,
    ),
    'process eiw data' => array(
      'title' => t('Process EIW Data'),
      'restrict access' => TRUE,
    ),
    'manage eiw connect' => array(
      'title' => t('manage eiw connect'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Call the custom settings form.
 */
function eiw_connect_form() {
  return drupal_get_form('eiw_connect_settings_form');
}

/**
 * Settings form for configuration.
 */
function eiw_connect_settings_form() {

  $form['mssql_host'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Host IP'),
    '#description' => t('The IP address of the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_host', ''),
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['mssql_port'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Port'),
    '#description' => t('The port for the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_port', '1433'),
    '#size' => 10,
    '#required' => TRUE,
  );

  $form['mssql_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Domain'),
    '#description' => t('The domain for the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_domain', ''),
    '#size' => 40,
    '#required' => TRUE,
  );

  $form['mssql_user'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Username'),
    '#description' => t('The username for the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_user', ''),
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['mssql_password'] = array(
    '#type' => 'password',
    '#title' => t('MS SQL Password'),
    '#description' => t('The password for the MS SQL Server instance.'),
    '#default_value' => '',
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['mssql_schema'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Schema'),
    '#description' => t('The database schema to use when querying the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_schema', ''),
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Validate the form.
 */
function eiw_connect_settings_form_validate($form, &$form_state) {
  // Validate the host IP.
  if (empty($form_state['input']['mssql_host']) || !(preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/', $form_state['input']['mssql_host']))) {
    form_set_error('mssql_host', 'You must enter an IP address for the server instance ex: 10.0.0.1');
  }
  // Validate the host port.
  if (empty($form_state['input']['mssql_port']) || !(preg_match('/^\d{1,5}$/', $form_state['input']['mssql_port']))) {
    form_set_error('mssql_port', 'You must enter a port for the server instance ex: 42000');
  }
  // Validate the host domain.
  if (empty($form_state['input']['mssql_domain'])) {
    form_set_error('mssql_domain', 'You must enter a domain for the server instance');
  }
  // Validate the host username.
  if (empty($form_state['input']['mssql_user'])) {
    form_set_error('mssql_user', 'You must enter a username for the server instance');
  }
  // Validate the host password.
  if (empty($form_state['input']['mssql_password'])) {
    form_set_error('mssql_password', 'You must enter a password for the server instance');
  }
  // Validate the host password.
  if (empty($form_state['input']['mssql_schema'])) {
    form_set_error('mssql_schema', 'You must enter a schema for the server instance');
  }
}

/**
 * Handle the submission of the form and encrypt the data.
 */
function eiw_connect_settings_form_submit($form, &$form_state) {
  // Save the variable values.
  variable_set('mssql_host', $form_state['input']['mssql_host']);
  variable_set('mssql_port', $form_state['input']['mssql_port']);
  variable_set('mssql_domain', $form_state['input']['mssql_domain']);
  variable_set('mssql_user', $form_state['input']['mssql_user']);
  variable_set('mssql_password', encrypt($form_state['input']['mssql_password']));
  variable_set('mssql_schema', $form_state['input']['mssql_schema']);
}

/**
 * Page to test that the connection settings can successfully connect to the remote MS SQL instance.
 */
function db_test_page() {
  module_load_include('inc', 'eiw_connect', 'eiw_connect');

  $db = new DatabaseConnection_mssql();

  $markup = '';

  if ($db->fetch_connection_error()) {
    $markup = $db->fetch_connection_error();
  }
  else {
    $markup .= '<h1>Connection Successful</h1>';
    $schemas = $db->select_query('SELECT name FROM master..sysdatabases');
    $tables = $db->select_query('SELECT name FROM sys.Tables');

    $markup .= '<div><h2>Available Schemas</h2><ul>';
    if (!empty($schemas)) {
      foreach($schemas as $schema) {
        $markup .= '<li><strong>' . $schema['name']  . '</strong></li>';
      }
    }
    $markup .= '</ul></div>';

    $markup .= '<div><h2>' . variable_get('mssql_schema')  .  ' Tables</h2><ul>';
    if (!empty($tables)) {
      foreach($tables as $table) {
        // Get the the count.
        $count = $db->select_query('SELECT COUNT(*) AS count FROM ' . $table['name']);
        $markup .= '<li><strong>' . $table['name']  . '</strong> : ( ' . $count[0]['count'] . ' rows )<ul>';
        $columns = $db->select_query('SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = "' . $table['name']  . '"');
        if (!empty($columns)) {
          foreach($columns as $column) {
            $markup .= '<li>' . $column['COLUMN_NAME'] . '</li>';
          }
        }
        $markup .= '</ul></li>';
      }
    }
    $markup .= '</ul></div>';
  }

  $page = array(
    '#markup' => $markup,
  );
  $output = drupal_render($page);

  return $output;
}

function eiw_connect_mapping_admin() {
  $x = "<a href='/admin/config/digitalcore/eiw/staging/mapping/eiw_product'>Product staging mapping</a><br>";
  $x .= "<a href='/admin/config/digitalcore/eiw/csv/upload/eiw_product'>Product Data CSV file upload</a><br>";
  $x .= "<a href='/admin/config/digitalcore/eiw/csv/mapping/eiw_product'>Product Data CSV Column Mapping</a><br>";
  $x .= "<a href='/admin/config/digitalcore/eiw/field_group/mapping/product_details'>Product Details Field Group Mapping</a><br>";
  $x .= "<a href='/service/digitalcore/eiw/process/'>Product Details Process callback</a>";

  return $x;
}

//Pulls up the form for a csv import to the staging table
function eiw_connect_csv_upload($data_type) {
  ini_set('memory_limit','256M');

  module_load_include('inc', 'digital_core_staging', 'digital_core_staging_csv_import');
  return drupal_get_form('digital_core_staging_csv_upload_form', $data_type);
}

//pulls up the form for mapping the csv data to the staging table fields
function eiw_connect_csv_mapping($data_type) {
  module_load_include('inc', 'digital_core_staging', 'digital_core_staging_field_mapping');
  return drupal_get_form('digital_core_staging_field_mapping_form', "eiw_connect",
          $data_type, array(), array(), "csv", array("alt" => false, 'primary_key' => false, "toType" => 'textfield'));
}

function eiw_connect_field_group_mapping($data_type) {
  $fromTable = '';

  //Add any relation between the content type and its static table here
  switch($data_type) {
    case "product_details": {
      $fromTable = 'digital_core_data_products';
      break;
    }
  }

  module_load_include('inc', 'digital_core_staging', 'digital_core_staging_field_mapping');
  module_load_include('inc', 'digital_core_staging', 'digital_core_staging_field_group_mapping');
  return drupal_get_form('digital_core_staging_field_group_mapping_form',
          'eiw_connect', $fromTable, $data_type);
}


//Pull in an instance of the digital core staging and use this for the mapping interface
function eiw_connect_staging_mapping($data_type) {

  $dataTypes = array();
  $staticTables = array();

  switch($data_type) {
    case "eiw_product": {
      $dataTypes = array("product_details");
      $staticTables = array('eiw_connect' => 'digital_core_data_products');
      break;
    }
    case "eiw_spplr": {
      $staticTables = array('eiw_connect' => 'digital_core_data_vendors');
      break;
    }
    case "eiw_brand": {
      $dataTypes = array("brand");
      break;
    }
    case "eiw_distncenter": {
      $staticTables = array('eiw_connect' => 'digital_core_data_distcenter');
      break;
    }
    case "eiw_distncenterproduct": {
      $staticTables = array('eiw_connect' => 'digital_core_data_distcenter_product');
      break;
    }
    case "eiw_productextdata": {
      $staticTables = array("eiw_connect" => "digital_core_data_products");
      break;
    }
    case 'eiw_productinven': {
      $staticTables = array("eiw_connect" => "digital_core_data_productinventory");
      break;
    }
    case 'eiw_nationalwarehouses': {
      $staticTables = array("eiw_connect" => "digital_core_data_national_warehouses");
      break;
    }
    case 'eiw_productinventoryextdata': {
      $staticTables = array("eiw_connect" => "digital_core_data_productinventory_ext");
      break;
    }
    case 'eiw_rcm_category': {
      $staticTables = array("eiw_connect" => "digital_core_data_rcm_categories");
      break;
    }
  }

  module_load_include('inc', 'digital_core_staging', 'digital_core_staging_field_mapping');
  return drupal_get_form('digital_core_staging_field_mapping_form', "eiw_connect",
          $data_type, $dataTypes, $staticTables, "staging",
          array("alt" => false, 'primary_key' => true, "toType" => "select"));
}

//wrapper so this can be called from the batch finish processing
function eiw_connect_process_data_eiw_product() {
  eiw_connect_process_data('eiw_product');
}

/*
 * Handle data from the stanging table into drupal
 */

function eiw_connect_process_data($data_type) {

  module_load_include('inc', 'digital_core_staging', 'digital_core_staging_process');
  digital_core_staging_process_data($data_type);
}

/*
 * implement hook_content_uri_adjust_content
 */
function eiw_connect_content_uri_adjust_content($json_data) {

  if(array_key_exists("content_types", $json_data)) {
    //add the mapped group data into the feed,

    //the static feed fields will map into the children fields
    //the field will need to be pulled up from the field data
    //i think there is missing label information tho
    foreach($json_data['content_types'] as $contentType => $data) {

      $mappings = db_select("digital_core_field_group_mapping")
                    ->fields("digital_core_field_group_mapping", array("fromField", "toField"))
                    ->condition("toField", "None", "!=")
                    ->condition("dataType", $contentType)
                    ->execute()
                    ->fetchAll();

      foreach($mappings as $mapping) {
        $json_data['content_types'][$contentType]["groups"][$mapping->toField]['children'][] = $mapping->fromField;
      }
    }
  }

  return $json_data;
}

//run the sync from EIW
function eiw_connect_sync_data($table, $idField, $destTable) {
  $handle = background_process_start('eiw_connect_direct_request_processor', array($table, $idField, $destTable));
}

function eiw_connect_direct_request_processor($parameters) {
  //switch user to allow cron to run this
  global $user;
  $user = user_load_by_name("EIW");

  $table = $parameters[0];
  $idField = $parameters[1];
  $destTable = $parameters[2];

  $dm = false;
  if(strncmp($table, "DM_", 3) == 0) {
    $dm = true;
  }

  module_load_include('inc', 'eiw_connect', 'eiw_connect');

  if($dm) {
    $lastSid = false;
  }
  else {
    //get the last job id ran
    $lastSid = db_select("eiw_jobs")
      ->fields('eiw_jobs', array("JobExecSid"))
      ->orderBy('receiveTime', 'DESC')
      ->condition("data_type", $destTable)
      ->range(0, 1)
      ->execute()
      ->fetchField();
  }

  $db = new DatabaseConnection_mssql();

  $return_value = '';

  if ($db->fetch_connection_error()) {
    $return_value = $db->fetch_connection_error();
  }
  else {

    $jobSIDs = array();

    $chunk = 0;
    $records = true;

    while($records) {
      $query = "SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY {$idField}) AS RowNum  FROM {$table}) AS MyDerivedTable WHERE MyDerivedTable.RowNum BETWEEN {$chunk} AND " . ($chunk+2000);

      if($lastSid) {
        $query .= " AND JobExecSid > {$lastSid}";
      }

      $product_data = $db->select_query($query);

      if(count($product_data) == 0) {
        $records = false;
        return;
      }

      $chunk += 2001;

      $fields = false;
      $q = db_insert($destTable);
      foreach($product_data as $row) {
        //populate the local table from the eiw data

        //strip the numeric indexes from the data, ugh
        $data = array();
        $field_data = array();

        //not provided add dummy one
        if($dm) {
          $row['JobExecSid'] = 0;
          $row['changeInd'] = 'I';
        }

        foreach($row as $id => $value) {
          if(!is_numeric($id) && $id != "RowNum") {
            $field_data[] = $id;

            if($value != null) {
              $data[$id] = mb_convert_encoding($value, 'ISO-8859-1');
            }
            else {
              $data[$id] = $value;
            }
          }
        }

        //pulls the field list off the first record
        if(!$fields) {
          $q->fields($field_data);
          $fields = true;
        }

        //set the values for this row to the query
        $q->values($data);

        //add this job sid to the tracking
        if (!in_array($row['JobExecSid'], $jobSIDs)) {
          $jobSIDs[] = $row['JobExecSid'];
        }
      }

      //we are running one large query per batch, this will speed it up a lot
      $q->execute();

      //update the jobs table to the fact we recieved these jobs
      foreach($jobSIDs as $sid) {

        //remove any current entry for this job if there is one
        db_delete("eiw_jobs")
          ->condition("JobExecSid", $sid)
          ->condition("data_type", $destTable)
          ->execute();

        db_insert("eiw_jobs")
          ->fields(array('data_type' => $destTable, "JobExecSid" => $sid, "receiveTime" => time(), "processed" => 0))
          ->execute();
      }
    }
  }
}

//implements hook_digital_core_staging_process_post()
function eiw_connect_digital_core_staging_process_post($destination, $data, $data_type) {

  if($destination == "digital_core_data_products") {

    module_load_include('inc', 'digital_core_data', 'digital_core_data_rcm_categories');
    module_load_include('inc', 'digital_core_data', 'digital_core_data_brands');

    if($data_type == "eiw_product") {

      //this is the simplest way to do this
      //set the product_name to the west desc if its empty
      db_query("update digital_core_data_products set product_name = west_product_desc where product_name = ''");



      //call the processing of the category to product here
      digitial_core_data_rcm_categories_relate_products($data);

      //relates the brands over
      digitial_core_data_brand_relate_products($data);
    }
  }
}