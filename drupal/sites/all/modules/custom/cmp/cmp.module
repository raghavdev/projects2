<?php

function cmp_menu() {
  $items = array();
  $items['admin/settings/configuration/cmp'] = array(
    'title' => 'CMP Integration FTP Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmp_ftp_admin'),
    'access arguments' => array('administer cmp ftp settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['reports/cmp_feed'] = array(
    'title' => 'CMP Feed',
    'description' => "Product feed that is uploaded to CMP",
    'page callback' => 'cmp_view_feed',
    'access callback' => 'user_access',
    'access arguments' => array('view cmp feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['reports/cmp_feed/generate'] = array(
    'title' => 'CMP Feed',
    'description' => "Generate new cmp feed on demand",
    'page callback' => 'cmp_view_feed_generate',
    'access callback' => 'user_access',
    'access arguments' => array('view cmp feed'),
    'type' => MENU_NORMAL_ITEM,
  );

//  //TEMP for testing
//  $items['admin/cmp/run'] = array(
//    'page callback' => 'cmp_process_export',
//    'access callback' => true,
//    'type' => MENU_CALLBACK,
//  );

  return $items;
}

/**
 * Implements hook_rules_action_info().
 */
function cmp_rules_action_info() {
  $actions = array(
    'cmp_process_export' => array(
      'label' => t('Run CMP Report'),
      'group' => t('Digital Core'),
    ),
  );
  return $actions;
}


/**
 * Implements hook_permission().
 */
function cmp_permission() {
  return array(
    'view cmp feed' =>  array(
      'title' => t('View CMP Feed'),
      'restrict access' => TRUE,
    ),
    'administer cmp ftp settings' => array(
      'title' => t('administer cmp ftp settings'),
      'restrict access' => TRUE,
    )
  );
}

function cmp_ftp_admin() {
  $form = array();
  $form['cmp_ftp_server'] = array(
    '#type' => 'textfield',
    '#title' => t('FTP address'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("FTP address for cmp server"),
    '#default_value' => variable_get('cmp_ftp_server'),
    '#required' => TRUE,
  );
  $form['cmp_ftp_login'] = array(
    '#type' => 'textfield',
    '#title' => t('FTP Login'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("FTP login for cmp server"),
    '#default_value' => variable_get('cmp_ftp_login'),
    '#required' => TRUE,
  );
  $form['cmp_ftp_password'] = array(
    '#type' => 'password',
    '#title' => t('FTP Password'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("FTP password for cmp server"),
    '#required' => TRUE,
  );

  $form['cmp_ftp_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('File Folder'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("file folder cmp data will be placed"),
    '#default_value' => variable_get('cmp_ftp_folder'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


function cmp_view_feed_generate() {

  $page = 0;

  if(array_key_exists("page", $_GET) && is_numeric($_GET['page'])) {
    $page = $_GET['page'];
  }

  //get the list of products that are in the export
  $query = db_select("field_data_field_cmp_include")
                ->fields("field_data_field_cmp_include", array('entity_id'))
                ->condition("field_cmp_include_value", 1);
  $query->addJoin("inner", "field_data_field_print_image", "p", "p.entity_id = field_data_field_cmp_include.entity_id");
  $products =  $query->execute()
                     ->fetchCol();

  $query = db_select("field_data_field_cmp_include")
      ->fields("field_data_field_cmp_include", array('entity_id'))
      ->condition("field_cmp_include_value", 1, "<>");
  $query->addJoin("inner", "field_data_field_print_image", "p", "p.entity_id = field_data_field_cmp_include.entity_id");
  $nonproducts = $query->execute()
      ->fetchCol();

  //  echo "cmp:" . count($products);

  $products = array_merge($products, $nonproducts);

//  echo "non:" . count($nonproducts);
//
//  exit;

  $file = "public://cmpexport/UNFI_CMPProducts.xml";


  cmp_process_xml_stream($file, $products);

  return "<a href=" . file_create_url($file) . ">Download Report</a>";
}

function cmp_view_feed() {
  $file = "public://cmpexport/UNFI_CMPProducts.xml";
  return "<a href=" . file_create_url($file) . ">Download Report</a>";
}

/*
 * Handle the CMP export
 */
function cmp_process_export() {

  module_load_include('inc', 'cmp', 'ftp_client');

  //dont run more than once a day
  $last_run = variable_get("cmp_report_last_run", "1-1-1990");

  //add 1 day to the last day we ran
  $last_date = new DateTime($last_run);
  $last_date->add(new DateInterval('P1D'));
  $now = new DateTime();

  //if this new date <= today then we can run again
  if($last_date > $now) {
    return;
  }

  variable_set("cmp_report_last_run", $now->format('d-m-Y'));

  //TODO should be private
  $exportDir = 'public://cmpexport/'.date('Ymd');
  file_prepare_directory($exportDir, FILE_CREATE_DIRECTORY);

  //get the list of all products that have a print image but not cmp, these are included also
  $query = db_select("field_data_field_cmp_include")
      ->fields("field_data_field_cmp_include", array('entity_id'))
      ->condition("field_cmp_include_value", 1, "<>");
  $query->addJoin("inner", "field_data_field_print_image", "p", "p.entity_id = field_data_field_cmp_include.entity_id");
  $nonproducts = $query->execute()
      ->fetchCol();

  //get the list of products that are in the export

  //get all products that are always
  $query = db_select("field_data_field_cmp_include")
                ->fields("field_data_field_cmp_include", array('entity_id'))
                ->condition("field_cmp_include_value", 1);
  $query->addJoin("inner", "field_data_field_print_image", "p", "p.entity_id = field_data_field_cmp_include.entity_id");
  $products = $query->execute()
                    ->fetchCol();

  //figure out which products are in the range
  //this is a fun query, convert the drupal field values into a unix time stamp and do a comparision on them to now
  $r_products = db_query("SELECT sm.`entity_id`, UNIX_TIMESTAMP(STR_TO_DATE(CONCAT(sm.`field_cmp_start_month_value`, ' ', sd.`field_cmp_start_day_value`, ' ', sy.`field_cmp_start_year_value`, '12:00AM'), '%m %d %Y %h:%i%p')) s,"
          . " UNIX_TIMESTAMP(STR_TO_DATE(CONCAT(em.`field_cmp_end_month_value`, ' ', ed.`field_cmp_end_day_value`, ' ', ey.`field_cmp_end_year_value`, '12:00AM'), '%m %d %Y %h:%i%p')) e  from field_data_field_cmp_start_month sm
          inner join field_data_field_cmp_start_day sd on sm.`entity_id` = sd.`entity_id`
          inner join field_data_field_cmp_start_year sy on sy.`entity_id` = sd.`entity_id`
          inner join field_data_field_cmp_end_month em on em.`entity_id` = sd.`entity_id`
          inner join field_data_field_cmp_end_day ed on ed.`entity_id` = sd.`entity_id`
          inner join field_data_field_cmp_end_year ey on ey.`entity_id` = sd.`entity_id`
          inner join field_data_field_cmp_include i on i.`entity_id` = sd.`entity_id`
          inner join field_data_field_print_image p on p.entity_id = sd.entity_id
          where i.`field_cmp_include_value` = 2
          having s <= UNIX_TIMESTAMP() and e >= UNIX_TIMESTAMP()
          ")->fetchCol();

  $products = array_merge($products, $r_products);
  $products = array_merge($products, $nonproducts);

  if($products && count($products) > 0) {

    cmp_process_xml_stream($exportDir . "/UNFI_CMPProducts.xml", $products);
    cmp_process_images($exportDir, $products);

    //upload the files to their final location

    $server = variable_get('cmp_ftp_server');
    $login = variable_get('cmp_ftp_login');
    $pass = variable_get('cmp_ftp_password');
    $folder = variable_get('cmp_ftp_folder');

    if($server === '' || $login === '' || $pass === '') {
      //cant continue these values are required
      return false;
    }

    $ftp_client = new ftpClient($server, $login, $pass, false);

    //open ftp connection
    $ftp_client->open();

    //upload the files
    //upload all the files from the exportDir folder to the directory from the settings
    $files = file_scan_directory($exportDir, "*.*", array("filename" => "uri"));

    foreach($files as $filename => $file) {
      $result = $ftp_client->put(drupal_realpath($filename), $folder."/".$file->filename);

      //if this is an image file need to log its upload
      if(strpos($file->filename, "csv") === false) {

        //find the preview url for this image
        $fid = db_select("file_managed")
          ->fields("file_managed", array("fid"))
          ->condition("filename", $file->filename)
          ->execute()
          ->fetchField();

        $f = file_load($fid);

        $url = file_create_url($f->uri);

        //log the transaction
        //digital_core_cmp_ftp_log
        db_insert("digital_core_cmp_ftp_log")
          ->fields(array("filename" => $file->filename,
            "timestamp" => time(),
            "status" => ($result ? 0 : 1),
            "message" => ($result ? "Image file successfully uploaded" : "Error on image file upload"),
            "preview_url" => $url))
          ->execute();
      }

      //remove the export file
      file_unmanaged_delete($filename);
    }

    drupal_rmdir($exportDir);

    $ftp_client->close();
  }
}

//Generate the xml using xml writer instead
function cmp_process_xml_stream($exportFile, $products) {

  //temp fix because this takes up way too much memory
  ini_set('memory_limit', '1024M');

  $writer = new XMLWriter();
  $writer->openURI($exportFile);
  $writer->startDocument('1.0','UTF-8');
  $writer->setIndent(4);
  $writer->startElement("products");

  if(count($products) > 0) {

    //still need to batch this data since its too big to put it all in memory at once
    $chunks = array_chunk($products, 5000);

    foreach($chunks as $chunk) {

      $productIds = implode(", ", $chunk);

      $productsData = db_query("select field_cmp_include_value as participating, field_data_field_productsid.`field_productsid_value`, brand.title as brand, digital_core_data_rcm_categories.*, field_data_field_flyer_description.`field_flyer_description_value`" .
          ", file_managed.type as fileext, file_managed.filename, digital_core_data_products.*, digital_core_data_products.productsid as psid
      from node
      inner join field_data_field_productsid on field_data_field_productsid.`entity_id` = node.nid
      left join field_data_field_cmp_include i on i.`entity_id` = node.nid
      left join field_data_field_brand on field_data_field_brand.`entity_id` = node.nid
      left join field_data_field_category on field_data_field_category.entity_id = node.nid
      left join field_data_field_flyer_description on field_data_field_flyer_description.entity_id = node.nid
      left join field_data_field_print_image on field_data_field_print_image.`entity_id` = node.nid
      left join node brand on brand.nid = field_data_field_brand.`field_brand_nid`
      left join digital_core_data_products on digital_core_data_products.`ProductSid` = field_data_field_productsid.`field_productsid_value`
      left join `file_managed` on file_managed.fid = field_data_field_print_image.`field_print_image_target_id`
      left join digital_core_data_rcm_categories on digital_core_data_rcm_categories.`RetailCatLinkSid` = digital_core_data_products.`RetailCatLinkSid`
        where node.nid in ({$productIds})")->fetchAll();

      //tried to use the db_select and it caused an out of memory error, and this works
      $distData = db_query("select field_data_field_productsid.`field_productsid_value` as psid, eiw_distcenter_codes.`code` as whcode, digital_core_data_distcenter.*, digital_core_data_distcenter_product.* from field_data_field_productsid
      inner join digital_core_data_distcenter_product on digital_core_data_distcenter_product.`ProductSid` = field_data_field_productsid.`field_productsid_value`
      inner join digital_core_data_distcenter on digital_core_data_distcenter.`DistnCenterLocationSid` = digital_core_data_distcenter_product.`DistnCenterLocationSid`
      inner join eiw_distcenter_codes on eiw_distcenter_codes.`name` = digital_core_data_distcenter.`Location_Name`
      where field_data_field_productsid.entity_id in ({$productIds})")->fetchAll();

      //move into a keyed array for speed
      $distProducts = array();
      foreach ($distData as $d) {
        if (array_key_exists($d->psid, $distProducts)) {
          $distProducts[$d->psid][] = $d;
        } else {
          $p = array();
          $p[] = $d;
          $distProducts[$d->psid] = $p;
        }
      }

      //need to get vendor data
      $q = db_select("field_data_field_productsid");
      $q->addJoin("inner", "digital_core_data_products", "p", "field_data_field_productsid.field_productsid_value = p.productsid");
      $q->addJoin("inner", "digital_core_data_distcenter_product", "dp", "dp.productsid = p.productsid");
      $q->addJoin("inner", "digital_core_data_vendors", "v", "v.VendoracctSid = dp.vendor_acct_sid");
      $q->fields("p", array("productsid"));
      $q->fields("v", array("RemitNum", "vendoracctnum", "VendorAcctNm"));
      $q->groupBy("productsid");
      $q->condition("field_data_field_productsid.entity_id", $products, 'IN');

      $vendordata = $q->execute()
          ->fetchAllAssoc("productsid");

      foreach ($productsData as $product) {

        //log this file being processed for export
        db_insert("digital_core_cmp_product_log")
          ->fields(array("upc" => $product->upc,
            "east_id" => $product->east_product_id_full,
            "west_id" => $product->west_product_id,
            "name" => $product->product_name,
            "timestamp" => time(),))
          ->execute();

        $eastCount = 0;
        $westCount = 0;

        if (array_key_exists($product->ProductSid, $distProducts)) {
          $affiliations = array();
          $warehouses = array();

          $discontinued_stats = array("Discontinued by Pack Change", "Discontinued by Supplier", "Discontinued by UNFI");
          $discontinued = false;

          foreach ($distProducts[$product->ProductSid] as $dist) {
            if ($dist->Owning_Organization_Alias_Name == "UNFI East Region" && $dist->avail_desc == "AVAILABLE") {
              $eastCount++;
              $warehouses[] = $dist->whcode;
            } else if ($dist->Owning_Organization_Alias_Name == "UNFI West Region" && $dist->avail_desc == "AVAILABLE") {

              $westCount++;
              $warehouses[] = $dist->whcode;
            } else if (in_array($dist->avail_status, $discontinued_stats)) {
              $discontinued = true;
            }
          }

          if ($eastCount > 0) {
            $affiliations[] = "East";
            $affiliations[] = "AOEast";
            $affiliations[] = "Super";
          }

          if ($westCount > 0) {
            $affiliations[] = "West";
            $affiliations[] = "AOWest";

            if (!in_array("Super", $affiliations)) {
              $affiliations[] = "Super";
            }
          }
        }

        //must have avail or the product wont be recorded to the feed
        if ($eastCount != 0 || $westCount != 0) {

          $writer->startElement("product");

          if (isset($product->filename)) {
            $writer->writeElement("imagename", $product->filename);
          } else {
            cmp_log_field_warning($product->upc, "Image Name field empty");

            $writer->writeElement("imagename", "");
          }

          $itmTypeData = explode(";", $product->item_advertising_text);

          if (isset($itmTypeData[0])) {
            $writer->writeElement("description", trim($itmTypeData[0]));
          } else if (isset($product->item_advertising_text)) {
            $writer->writeElement("description", trim($product->item_advertising_text));
          } else if (isset($product->product_name)) {
            $writer->writeElement("description", trim($product->product_name));
          } else {
            cmp_log_field_warning($product->upc, "Description field empty");
            $writer->writeElement("description", "");
          }

          if (isset($product->field_flyer_description_value)) {
            $writer->writeElement('advertisingcopy', $product->field_flyer_description_value);
          } else {
            $writer->writeElement('advertisingcopy', "");
          }

          if (isset($itmTypeData[1])) {
            $writer->writeElement('itemtype', ($itmTypeData[1] ? trim($itmTypeData[1]) : ""));
          } else {
            $writer->writeElement('itemtype', "");
          }

          $writer->writeElement('itemsize', ($product->item_size ? $product->item_size : ""));

          $factno = substr((string)((int)$product->upc), 0, 5);

          if ($factno != "") {
            $writer->writeElement('factno', $factno);
          } else {
            cmp_log_field_warning($product->upc, "Factno field empty");
            $writer->writeElement('factno', $factno);
          }

          $writer->writeElement('upc', ($product->upc ? substr($product->upc, 0, 12) : ""));

          if (!$product->east_product_id_full && !$product->west_product_id) {
            cmp_log_field_warning($product->upc, "SKU fields are empty");
          }

          $writer->writeElement('skueast', ($product->east_product_id_full ? $product->east_product_id_full : ""));

          $writer->writeElement('skuwest', ($product->west_product_id ? $product->west_product_id : ""));

          if ($product->brand) {
            $writer->writeElement('brand', ucwords(strtolower(($product->brand))));
          } else {
            cmp_log_field_warning($product->upc, "Brand field is empty");
            $writer->writeElement('brand', "");
          }

          if ($product->department_name && $product->department_name != "") {
            $writer->writeElement('department', $product->department_name);
          } else {
            //LOG THE ERROR
            cmp_log_field_warning($product->upc, "Department field empty");

            $writer->writeElement('department', "");
          }

          if ($product->subsegment_name && $product->subsegment_name != "" && $product->subsegment_name != "Not Applicable") {
            $writer->writeElement('category', $product->subsegment_name);
          } else if ($product->segment_name && $product->segment_name != "" && $product->segment_name != "Not Applicable") {
            $writer->writeElement('category', $product->segment_name);
          } else if ($product->category_name && $product->category_name != "" && $product->category_name != "Not Applicable") {
            $writer->writeElement('category', $product->category_name);
          } else {
            cmp_log_field_warning($product->upc, "Category field empty");

            //ERRRORRRR LOG IT
            $writer->writeElement('category', "");
          }

          if ($product->participating) {
            $writer->writeElement('participating', 'Y');
          } else {
            $writer->writeElement('participating', 'N');
          }

          //        if (array_key_exists($product->ProductSid, $distProducts)) {
          //          $affiliations = array();
          //          $warehouses = array();
          //          $eastCount = 0;
          //          $westCount = 0;
          //          $discontinued_stats = array("Discontinued by Pack Change", "Discontinued by Supplier", "Discontinued by UNFI");
          //          $discontinued = false;
          //
          //          foreach ($distProducts[$product->ProductSid] as $dist) {
          //            if ($dist->Owning_Organization_Alias_Name == "UNFI East Region" && $dist->avail_desc == "AVAILABLE") {
          //              $eastCount++;
          //              $warehouses[] = $dist->whcode;
          //            } else if ($dist->Owning_Organization_Alias_Name == "UNFI West Region" && $dist->avail_desc == "AVAILABLE") {
          //
          //              $westCount++;
          //              $warehouses[] = $dist->whcode;
          //            } else if (in_array($dist->avail_status, $discontinued_stats)) {
          //              $discontinued = true;
          //            }
          //          }
          //
          //          if ($eastCount > 0) {
          //            $affiliations[] = "East";
          //            $affiliations[] = "AOEast";
          //            $affiliations[] = "Super";
          //          }
          //
          //          if ($westCount > 0) {
          //            $affiliations[] = "West";
          //            $affiliations[] = "AOWest";
          //
          //            if (!in_array("Super", $affiliations)) {
          //              $affiliations[] = "Super";
          //            }
          //          }

          $i = 1;
          foreach ($affiliations as $a) {
            $writer->writeElement('affiliation' . $i, $a);
            $i++;
          }

          if (count($affiliations) == 0) {
            cmp_log_field_warning($product->upc, "Product contains no affiliations");
          }

          $i = 1;
          //only include the wh values if used
          foreach ($warehouses as $w) {
            $writer->writeElement('wh' . $i, $w);
            $i++;
          }

          if (count($warehouses) == 0) {
            cmp_log_field_warning($product->upc, "Product contains no assigned warehouses");
          }

          $writer->writeElement('discontinued', ($discontinued ? "Y" : "N"));


          if (array_key_exists($product->ProductSid, $vendordata)) {
            $writer->writeElement('vendor', $vendordata[$product->ProductSid]->RemitNum . "-" . $vendordata[$product->ProductSid]->vendoracctnum . ' ' . $vendordata[$product->ProductSid]->VendorAcctNm);
          } else {
            $writer->writeElement('vendor', "");
            cmp_log_field_warning($product->upc, "Vendor field empty");
          }

          $writer->endElement();
        }
      }
    }
    //}
  }

  $writer->endElement();
  $writer->endDocument();
  $writer->flush();

}

//log an error in the feed generation
function cmp_log_field_warning($upc, $message) {
  global $user;

  db_insert("digital_core_cmp_warning_log")
    ->fields(array("upc" => $upc,
                   "message" => $message,
                   "datetime" => time(),
                   "user" => $user->uid))
    ->execute();
}

/*
 * generate the xml
 */
function cmp_process_xml($exportFile, $products) {

  $productsXML = new SimpleXMLElement("<products></products>");

  if(count($products) > 0) {
    //$segments = array_chunk($products, 1000);

    //foreach($segments as $segment) {

    $productIds = implode(", ", $products);

    $productsData = db_query("select field_data_field_productsid.`field_productsid_value`, brand.title as brand, taxonomy_term_data.tid, taxonomy_term_data.name as category, field_data_field_flyer_description.`field_flyer_description_value`" .
        ", file_managed.type as fileext, digital_core_data_products.*, digital_core_data_products.productsid as psid
    from node
    inner join field_data_field_productsid on field_data_field_productsid.`entity_id` = node.nid
    left join field_data_field_brand on field_data_field_brand.`entity_id` = node.nid
    left join field_data_field_category on field_data_field_category.entity_id = node.nid
    left join field_data_field_flyer_description on field_data_field_flyer_description.entity_id = node.nid
    left join field_data_field_primary_image on field_data_field_primary_image.`entity_id` = node.nid
    left join node brand on brand.nid = field_data_field_brand.`field_brand_nid`
    left join digital_core_data_products on digital_core_data_products.`ProductSid` = field_data_field_productsid.`field_productsid_value`
    left join `file_managed` on file_managed.fid = field_data_field_primary_image.`field_primary_image_target_id`
    left join taxonomy_term_data on taxonomy_term_data.tid = field_data_field_category.`field_category_tid`
      where node.nid in ({$productIds})")->fetchAll();

    //tried to use the db_select and it caused an out of memory error, and this works
    $distData = db_query("select field_data_field_productsid.`field_productsid_value` as psid, eiw_distcenter_codes.`code` as whcode, digital_core_data_distcenter.*, digital_core_data_distcenter_product.* from field_data_field_productsid
	inner join digital_core_data_distcenter_product on digital_core_data_distcenter_product.`ProductSid` = field_data_field_productsid.`field_productsid_value`
    inner join digital_core_data_distcenter on digital_core_data_distcenter.`DistnCenterLocationSid` = digital_core_data_distcenter_product.`DistnCenterLocationSid`
    inner join eiw_distcenter_codes on eiw_distcenter_codes.`name` = digital_core_data_distcenter.`Location_Name`
    where field_data_field_productsid.entity_id in ({$productIds})")->fetchAll();

    //move into a keyed array for speed
    $distProducts = array();
    foreach ($distData as $d) {
      if (array_key_exists($d->psid, $distProducts)) {
        $distProducts[$d->psid][] = $d;
      } else {
        $p = array();
        $p[] = $d;
        $distProducts[$d->psid] = $p;
      }
    }

    //need to get vendor data
    $q = db_select("field_data_field_productsid");
    $q->addJoin("inner", "digital_core_data_products", "p", "field_data_field_productsid.field_productsid_value = p.productsid");
    $q->addJoin("inner", "digital_core_data_distcenter_product", "dp", "dp.productsid = p.productsid");
    $q->addJoin("inner", "digital_core_data_vendors", "v", "v.VendoracctSid = dp.vendor_acct_sid");
    $q->fields("p", array("productsid"));
    $q->fields("v", array("RemitNum", "vendoracctnum", "VendorAcctNm"));
    $q->groupBy("productsid");
    $q->condition("field_data_field_productsid.entity_id", $products, 'IN');
    $vendordata = $q->execute()
        ->fetchAllAssoc("productsid");

    foreach ($productsData as $product) {

      $productNode = $productsXML->addChild('product');

      if (isset($product->field_primary_image) && $product->field_primary_image != "") {
        $productNode->addChild('imagename', $product->east_product_id . "cc." . $product->fileext);
      } else {
        $productNode->addChild('imagename', "");
      }

      $productNode->addChild('description', htmlentities($product->product_name, ENT_QUOTES, 'UTF-8'));

      if (isset($product->field_flyer_description)) {
        $productNode->addChild('advertisingcopy', $product->field_flyer_description);
      }

      $itmTypeData = explode(";", $product->product_name);

      if (isset($itmTypeData[1])) {
        $productNode->addChild('itemtype', ($itmTypeData[1] ? $itmTypeData[1] : ""));
      } else {
        $productNode->addChild('itemtype', "");
      }

      $productNode->addChild('itemsize', ($product->item_size ? $product->item_size : ""));

      $factno = substr((string)((int)$product->upc), 0, 5);

      $productNode->addChild('factno', $factno);
      $productNode->addChild('upc', ($product->upc ? $product->upc : ""));
      $productNode->addChild('skueast', ($product->east_product_id ? $product->east_product_id : ""));

      $productNode->addChild('skuwest', ($product->west_product_id ? $product->west_product_id : ""));

      //if($brandnode->brand) {
      // $productNode->addChild('brand', ($product->brand ? $brandnode->brand : ""));
      //}

      $productNode->addChild('brand', htmlentities($product->brand, ENT_QUOTES, 'UTF-8'));

      $q = db_select("taxonomy_term_hierarchy");
      $q->addJoin("inner", "taxonomy_term_data", "t", "t.tid = taxonomy_term_hierarchy.parent");
      $dept = $q->condition("taxonomy_term_hierarchy.parent", "0", "<>")
          ->condition("taxonomy_term_hierarchy.tid", $product->tid)
          ->fields("t", array("name"))
          ->execute()
          ->fetchField();

      if ($dept) {
        $productNode->addChild('department', htmlentities($dept, ENT_QUOTES, 'UTF-8'));
      } else {
        $productNode->addChild('department', "");
      }

      $productNode->addChild('category', ($product->category ? htmlentities($product->category, ENT_QUOTES, 'UTF-8') : ""));
      $productNode->addChild('participating', 'Y');

      if (array_key_exists($product->ProductSid, $distProducts)) {
        $affiliations = array();
        $wharehouses = array();
        $eastCount = 0;
        $westCount = 0;
        $discontinued_stats = array("discontinued by pack change", "discontinued by supplier", "discontinued by unfi");
        $discontinued = false;

        foreach ($distProducts[$product->ProductSid] as $dist) {
          if ($dist->Owning_Organization_Alias_Name == "UNFI East Region" && $dist->avail_desc == "AVAILABLE") {
            $eastCount++;
          } else if ($dist->Owning_Organization_Alias_Name == "UNFI West Region" && $dist->avail_desc == "AVAILABLE") {

            $westCount++;
          } else if (in_array($dist->avail_desc, strtolower($discontinued_stats))) {
            $discontinued = true;
          }

          $wharehouses[] = $dist->whcode;
        }

        if ($eastCount > 0) {
          $affiliations[] = "East";
          $affiliations[] = "AOEast";
          $affiliations[] = "Super";
        }

        if ($westCount > 0) {
          $affiliations[] = "West";
          $affiliations[] = "AOWest";

          if (!in_array("Super", $affiliations)) {
            $affiliations[] = "Super";
          }
        }

        $i = 1;
        foreach ($affiliations as $a) {
          $productNode->addChild('affiliation' . $i, $a);
          $i++;
        }

        $i = 1;
        //only include the wh values if used
        foreach ($wharehouses as $w) {
          $productNode->addChild('wh' . $i, $w);
          $i++;
        }

        $productNode->addChild('discontinued', ($discontinued ? "Y" : "N"));
      }

      if (array_key_exists($product->ProductSid, $vendordata)) {
        $productNode->addChild('vendor', $vendordata[$product->ProductSid]->RemitNum . "-" . $vendordata[$product->ProductSid]->vendoracctnum . htmlentities($vendordata[$product->ProductSid]->VendorAcctNm, ENT_QUOTES, 'UTF-8'));
      }
    }
    //}
  }

  if($exportFile) {
    //save the xml to the location it will be sent from
    $productsXML->saveXML($exportFile);
  }
  else {
    $productsXML->formatOutput = true;
    echo htmlspecialchars($productsXML->saveXML());
  }
}

/*
 * Process the image files
 */
function cmp_process_images($exportDir, $products) {
  foreach($products as $id) {
    $product = node_load($id);

    //TODO this ein lookup will have to change when it is removed

    //get the extended data
    if($product->field_productsid && !array_key_exists("und", $product->field_productsid)) {
      //this is an issue if there isnt an id we cant get the data, so cant get
      //the file name and cant export the image
      //but its better than an error
      continue;
    }

    $product_ext = db_select("digital_core_data_products")
                    ->fields("digital_core_data_products")
                    ->condition("productSID", $product->field_productsid['und'][0]['value'])
                    ->execute()
                    ->fetchObject();

    if($product_ext && $product_ext->east_product_id != null) {
      //process the image files, place them into a folder ready to upload

      //Print image
      if(array_key_exists("und", $product->field_print_image)) {
        $print = file_load($product->field_print_image['und'][0]['target_id']);

        if($print) {
          $ext = pathinfo($print->uri, PATHINFO_EXTENSION);
          file_unmanaged_copy($print->uri, $exportDir . "/" . $product_ext->east_product_id . "cc." . $ext);
        }
      }

      //Primary image
      if(array_key_exists("und", $product->field_primary_image)) {
        $primary = file_load($product->field_primary_image['und'][0]['target_id']);

        if($primary) {
          $ext = pathinfo($primary->uri, PATHINFO_EXTENSION);
          file_unmanaged_copy($primary->uri, $exportDir . "/" . $product_ext->east_product_id . "ccw." . $ext);
        }
      }
    }
  }
}

/**
 * Implements hook_rules_action_info().
 */
function pws_rules_action_info() {
  $actions = array(
    'cmp_process_export' => array(
      'label' => t('Processes the CMP data'),
      'group' => t('EIW'),
      'parameter' => array(
      ),
    ),
  );
  return $actions;
}