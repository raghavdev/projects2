<?php
/**
 * @file
 * bmb_product_details.default_field_validation_rules.inc
 */

/**
 * Implements hook_default_field_validation_rule().
 */
function bmb_product_details_default_field_validation_rule() {
  $export = array();

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'active_date_valid';
  $rule->name = 'active_date_valid';
  $rule->field_name = 'field_active_date';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_date_range2_validator';
  $rule->settings = array(
    'cycle' => 'global',
    'min' => '1990-12-31 00:00:00',
    'max' => '2020-01-01 00:00:00',
    'reverse' => 0,
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 1990 and 2020.';
  $export['active_date_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'added_sugars_decimals';
  $rule->name = 'added_sugars_decimals';
  $rule->field_name = 'field_added_sugars_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['added_sugars_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'approved_state_validation';
  $rule->name = 'approved_state_validation';
  $rule->field_name = 'field_activity_state';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_workflow_required_fields_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      18 => 0,
      19 => 0,
      20 => 0,
      16 => 0,
      17 => 0,
      21 => 0,
    ),
    'errors' => 1,
    'states' => array(
      4 => '4',
      5 => '5',
      6 => '6',
      7 => '7',
      2 => 0,
      3 => 0,
    ),
    'fields' => array(
      'field_bmb_category' => 'field_bmb_category',
      'field_bmb_product_type' => 'field_bmb_product_type',
      'field_brand' => 'field_brand',
      'field_case_gtin' => 'field_case_gtin',
      'field_case_upc' => 'field_case_upc',
      'field_country_of_origin' => 'field_country_of_origin',
      'field_dietary_preference' => 'field_dietary_preference',
      'field_ethnic_attributes' => 'field_ethnic_attributes',
      'field_free_of_attributes' => 'field_free_of_attributes',
      'field_gtin' => 'field_gtin',
      'field_ingredients' => 'field_ingredients',
      'field_ingredients_print' => 'field_ingredients_print',
      'field_inner_pack_gtin' => 'field_inner_pack_gtin',
      'field_inner_pack_upc' => 'field_inner_pack_upc',
      'field_item_description' => 'field_item_description',
      'field_item_description_2' => 'field_item_description_2',
      'field_item_size_uom' => 'field_item_size_uom',
      'field_major_allergen_attributes' => 'field_major_allergen_attributes',
      'field_organic_attributes' => 'field_organic_attributes',
      'field_primary_image' => 'field_primary_image',
      'field_salt_content_attributes' => 'field_salt_content_attributes',
      'field_secondary_allergen_attr' => 'field_secondary_allergen_attr',
      'field_serving_size_uom' => 'field_serving_size_uom',
      'field_short_description' => 'field_short_description',
      'field_sweetener_attributes' => 'field_sweetener_attributes',
      'field_upc' => 'field_upc',
      'field_veg_attributes' => 'field_veg_attributes',
      'field_added_sugars_value' => 'field_added_sugars_value',
      'field_calcium_value' => 'field_calcium_value',
      'field_calories_from_fat_value' => 'field_calories_from_fat_value',
      'field_calories_value' => 'field_calories_value',
      'field_cholesterol_value' => 'field_cholesterol_value',
      'field_dietary_fiber_value' => 'field_dietary_fiber_value',
      'field_insoluble_fiber_value' => 'field_insoluble_fiber_value',
      'field_iron_value' => 'field_iron_value',
      'field_item_num' => 'field_item_num',
      'field_item_size' => 'field_item_size',
      'field_omega3_value' => 'field_omega3_value',
      'field_paperb_recycle_percent' => 'field_paperb_recycle_percent',
      'field_potassium_value' => 'field_potassium_value',
      'field_protein_value' => 'field_protein_value',
      'field_saturated_fat_value' => 'field_saturated_fat_value',
      'field_serving_size_value' => 'field_serving_size_value',
      'field_servings_per_cont_value' => 'field_servings_per_cont_value',
      'field_sodium_value' => 'field_sodium_value',
      'field_soluble_fiber_value' => 'field_soluble_fiber_value',
      'field_sugar_value' => 'field_sugar_value',
      'field_total_carbohydrate_value' => 'field_total_carbohydrate_value',
      'field_total_fat_value' => 'field_total_fat_value',
      'field_trans_fat_value' => 'field_trans_fat_value',
      'field_vitamin_a_value' => 'field_vitamin_a_value',
      'field_vitamin_c_value' => 'field_vitamin_c_value',
      'field_whole_grain_per_serving' => 'field_whole_grain_per_serving',
      'field_allergens_in_facility' => 'field_allergens_in_facility',
      'field_active_date' => 0,
      'field_additional_images' => 0,
      'field_additional_origin' => 0,
      'field_alaska_seafood_cert' => 0,
      'field_backorderable' => 0,
      'field_baltimore_beverage_tax' => 0,
      'field_berkeley_beverage_tax' => 0,
      'field_beverage_container' => 0,
      'field_bottle_color' => 0,
      'field_buyer' => 0,
      'field_case_net_weight_uom' => 0,
      'field_case_weight_uom' => 0,
      'field_certified_humane' => 0,
      'field_certified_vegan' => 0,
      'field_chicago_water_tax' => 0,
      'field_closed_code_life_dating' => 0,
      'field_container_type' => 0,
      'field_contract_number' => 0,
      'field_controlled' => 0,
      'field_cost_end_date' => 0,
      'field_enrobed_in_chocolate_' => 0,
      'field_fair_trade_certificate' => 0,
      'field_freight_protection_from' => 0,
      'field_freight_protection_level' => 0,
      'field_gluten_attributes' => 0,
      'field_gluten_free' => 0,
      'field_gluten_free_certificate' => 0,
      'field_high' => 0,
      'field_inv_transaction_audit' => 0,
      'field_item_weight_uom' => 0,
      'field_itrade_export' => 0,
      'field_ix_one_export' => 0,
      'field_kosher_certificate' => 0,
      'field_kosher_daily' => 0,
      'field_kosher_mbuf' => 0,
      'field_kosher_pareve' => 0,
      'field_kosher_passover' => 0,
      'field_lead_time_customer' => 0,
      'field_lead_time_printing' => 0,
      'field_lead_time_shipping' => 0,
      'field_macola_id' => 0,
      'field_manufacturing_uom' => 0,
      'field_marine_stewardship_agency' => 0,
      'field_marine_stewardship_cert' => 0,
      'field_material_cost_type' => 0,
      'field_minimum_order_qty' => 0,
      'field_non_gmo' => 0,
      'field_open_code_life_dating' => 0,
      'field_organic_certificate' => 0,
      'field_organic_certifier' => 0,
      'field_po_req_fg' => 0,
      'field_price_basis_code' => 0,
      'field_price_uom' => 0,
      'field_primary_location' => 0,
      'field_processing_attributes' => 0,
      'field_product_intro_date' => 0,
      'field_product_labels' => 0,
      'field_purchasing_uom' => 0,
      'field_random_weight' => 0,
      'field_shelf_life_days' => 0,
      'field_spins_category' => 0,
      'field_spins_product_type' => 0,
      'field_state_of_origin' => 0,
      'field_stocked' => 0,
      'field_stocking_uom' => 0,
      'field_target_export' => 0,
      'field_taxable' => 0,
      'field_tie' => 0,
      'field_type_of_code_life_dating' => 0,
      'field_unfi_east' => 0,
      'field_unfi_east_id' => 0,
      'field_unfi_west' => 0,
      'field_unfi_west_id' => 0,
      'field_warranty_days' => 0,
      'field_web_category' => 0,
      'field_whole_grain_council' => 0,
      'field_category' => 0,
      'field_web_export' => 0,
      'field_biotin_value' => 0,
      'field_case_cube' => 0,
      'field_case_height' => 0,
      'field_case_length' => 0,
      'field_case_net_weight' => 0,
      'field_case_weight' => 0,
      'field_case_width' => 0,
      'field_chloride_value' => 0,
      'field_chromium_value' => 0,
      'field_copper_value' => 0,
      'field_cube_height' => 0,
      'field_cube_length' => 0,
      'field_cube_width' => 0,
      'field_folate_value' => 0,
      'field_iodine_value' => 0,
      'field_item_weight' => 0,
      'field_juice_percent' => 0,
      'field_magnesium_value' => 0,
      'field_manganese_value' => 0,
      'field_molybdenum_value' => 0,
      'field_monounsat_fat_value' => 0,
      'field_net_carbohydrate_value' => 0,
      'field_niacin_value' => 0,
      'field_pack_height' => 0,
      'field_pack_length' => 0,
      'field_pack_width' => 0,
      'field_pallet_height' => 0,
      'field_pallet_weight' => 0,
      'field_pantothenic_acid_value' => 0,
      'field_phosphorous_value' => 0,
      'field_polyunsat_fat_value' => 0,
      'field_riboflavin_value' => 0,
      'field_selenium_value' => 0,
      'field_thiamin_value' => 0,
      'field_vitamin_b12_value' => 0,
      'field_vitamin_b6_value' => 0,
      'field_vitamin_d_value' => 0,
      'field_vitamin_e_value' => 0,
      'field_vitamin_k_value' => 0,
      'field_zinc_value' => 0,
      'field_forecast_number' => 0,
      'field_activity_date' => 0,
      'field_case_pack' => 0,
      'field_east_fob_location' => 0,
      'field_grocery_type' => 0,
      'field_guaranteed_shelf_life' => 0,
      'field_inner_case_pack' => 0,
      'field_kosher_certifying_agency' => 0,
      'field_manufacturing_method' => 0,
      'field_master_case_pack' => 0,
      'field_pur_or_mfg' => 0,
      'field_serial_lot' => 0,
      'field_serving_size_string' => 0,
      'field_upc_code_macola' => 0,
      'field_west_fob_location' => 0,
      'field_approved_source' => 0,
      'field_vendor_pricing' => 0,
    ),
  );
  $rule->error_message = 'The following fields must be populated before the status can change: [fields]';
  $export['approved_state_validation'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'biotin_decimals';
  $rule->name = 'biotin_decimals';
  $rule->field_name = 'field_biotin_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['biotin_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'calcium_decimals';
  $rule->name = 'calcium_decimals';
  $rule->field_name = 'field_calcium_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['calcium_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'calories_decimals';
  $rule->name = 'calories_decimals';
  $rule->field_name = 'field_calories_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['calories_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'calories_from_fat_decimals';
  $rule->name = 'calories_from_fat_decimals';
  $rule->field_name = 'field_calories_from_fat_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['calories_from_fat_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'chloride_decimals';
  $rule->name = 'chloride_decimals';
  $rule->field_name = 'field_chloride_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['chloride_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'cholesterol_decimals';
  $rule->name = 'cholesterol_decimals';
  $rule->field_name = 'field_cholesterol_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['cholesterol_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'chromium_decimals';
  $rule->name = 'chromium_decimals';
  $rule->field_name = 'field_chromium_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['chromium_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'contract_number_valid';
  $rule->name = 'contract_number_valid';
  $rule->field_name = 'field_contract_number';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_current_year_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] should be the current year.';
  $export['contract_number_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'copper_decimals';
  $rule->name = 'copper_decimals';
  $rule->field_name = 'field_copper_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['copper_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'description_2_length';
  $rule->name = 'description_2_length';
  $rule->field_name = 'field_item_description_2';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_length_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '30',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must not be more then [max] characters.';
  $export['description_2_length'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'description_length';
  $rule->name = 'description_length';
  $rule->field_name = 'field_item_description';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_length_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '30',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must not be more then [max] characters.';
  $export['description_length'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'dietary_fiber_decimals';
  $rule->name = 'dietary_fiber_decimals';
  $rule->field_name = 'field_dietary_fiber_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['dietary_fiber_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'folate_decimals';
  $rule->name = 'folate_decimals';
  $rule->field_name = 'field_folate_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['folate_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_gtin_valid';
  $rule->name = 'inner_pack_gtin_valid';
  $rule->field_name = 'field_inner_pack_gtin';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_gtin14_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] [value] is not a valid GTIN-14';
  $export['inner_pack_gtin_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_height_decimals';
  $rule->name = 'inner_pack_height_decimals';
  $rule->field_name = 'field_cube_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['inner_pack_height_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_height_range';
  $rule->name = 'inner_pack_height_range';
  $rule->field_name = 'field_cube_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['inner_pack_height_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_length_decimals';
  $rule->name = 'inner_pack_length_decimals';
  $rule->field_name = 'field_cube_length';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['inner_pack_length_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_length_range';
  $rule->name = 'inner_pack_length_range';
  $rule->field_name = 'field_cube_length';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['inner_pack_length_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_upc_valid';
  $rule->name = 'inner_pack_upc_valid';
  $rule->field_name = 'field_inner_pack_upc';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_gtin12_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] [value] is not a valid UPC-12';
  $export['inner_pack_upc_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_width_decimals';
  $rule->name = 'inner_pack_width_decimals';
  $rule->field_name = 'field_cube_width';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['inner_pack_width_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'inner_pack_width_range';
  $rule->name = 'inner_pack_width_range';
  $rule->field_name = 'field_cube_width';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['inner_pack_width_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'insoluble_fiber_decimals';
  $rule->name = 'insoluble_fiber_decimals';
  $rule->field_name = 'field_insoluble_fiber_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['insoluble_fiber_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'intro_date_valid';
  $rule->name = 'intro_date_valid';
  $rule->field_name = 'field_product_intro_date';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_date_range2_validator';
  $rule->settings = array(
    'cycle' => 'global',
    'min' => '1990-12-31 00:00:00',
    'max' => '2020-01-01 00:00:00',
    'reverse' => 0,
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 1990 and 2020.';
  $export['intro_date_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'iodine_decimals';
  $rule->name = 'iodine_decimals';
  $rule->field_name = 'field_iodine_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['iodine_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'iron_decimals';
  $rule->name = 'iron_decimals';
  $rule->field_name = 'field_iron_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['iron_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'magnesium_decimals';
  $rule->name = 'magnesium_decimals';
  $rule->field_name = 'field_magnesium_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['magnesium_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'manganese_decimals';
  $rule->name = 'manganese_decimals';
  $rule->field_name = 'field_manganese_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['manganese_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_gross_weight_decimals';
  $rule->name = 'master_case_gross_weight_decimal';
  $rule->field_name = 'field_case_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['master_case_gross_weight_decimal'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_gross_weight_range';
  $rule->name = 'master_case_gross_weight_range';
  $rule->field_name = 'field_case_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['master_case_gross_weight_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_gtin_valid';
  $rule->name = 'master_case_gtin_valid';
  $rule->field_name = 'field_case_gtin';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_gtin14_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] [value] is not a valid GTIN-14';
  $export['master_case_gtin_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_height_decimals';
  $rule->name = 'master_case_height_decimals';
  $rule->field_name = 'field_case_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['master_case_height_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_height_range';
  $rule->name = 'master_case_height_range';
  $rule->field_name = 'field_case_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['master_case_height_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_length_decimals';
  $rule->name = 'master_case_length_decimals';
  $rule->field_name = 'field_case_length';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['master_case_length_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_length_range';
  $rule->name = 'master_case_length_range';
  $rule->field_name = 'field_case_length';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['master_case_length_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_net_weight_decimals';
  $rule->name = 'master_case_net_weight_decimals';
  $rule->field_name = 'field_case_net_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['master_case_net_weight_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_net_weight_range';
  $rule->name = 'master_case_net_weight_range';
  $rule->field_name = 'field_case_net_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['master_case_net_weight_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_upc_valid';
  $rule->name = 'master_case_upc_valid';
  $rule->field_name = 'field_case_upc';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_gtin12_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] [value] is not a valid UPC-12';
  $export['master_case_upc_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_width_decimals';
  $rule->name = 'master_case_width_decimals';
  $rule->field_name = 'field_case_width';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['master_case_width_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'master_case_width_range';
  $rule->name = 'master_case_width_range';
  $rule->field_name = 'field_case_width';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['master_case_width_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'min_order_quantity_range';
  $rule->name = 'min_order_quantity_range';
  $rule->field_name = 'field_minimum_order_qty';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '1',
    'max' => '9999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 10000.';
  $export['min_order_quantity_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'molybdenum_decimals';
  $rule->name = 'molybdenum_decimals';
  $rule->field_name = 'field_molybdenum_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['molybdenum_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'monounsaturated_fat_decimals';
  $rule->name = 'monounsaturated_fat_decimals';
  $rule->field_name = 'field_monounsat_fat_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['monounsaturated_fat_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'net_carbs_decimals';
  $rule->name = 'net_carbs_decimals';
  $rule->field_name = 'field_net_carbohydrate_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['net_carbs_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'net_size_decimals';
  $rule->name = 'net_size_decimals';
  $rule->field_name = 'field_item_size';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.01',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      18 => 0,
      19 => 0,
      20 => 0,
      16 => 0,
      17 => 0,
      21 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within two decimal places.';
  $export['net_size_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'net_size_greater_zero';
  $rule->name = 'net_size_greater_zero';
  $rule->field_name = 'field_item_size';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.1',
    'max' => '',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be greater than 0.';
  $export['net_size_greater_zero'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'net_weight_drained_decimals';
  $rule->name = 'net_weight_drained_decimals';
  $rule->field_name = 'field_item_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.01',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      18 => 0,
      19 => 0,
      20 => 0,
      16 => 0,
      17 => 0,
      21 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within two decimal places.';
  $export['net_weight_drained_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'net_weight_drained_greater_zero';
  $rule->name = 'net_weight_drained_greater_zero';
  $rule->field_name = 'field_item_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.1',
    'max' => '',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be greater than 0.';
  $export['net_weight_drained_greater_zero'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'niacin_decimals';
  $rule->name = 'niacin_decimals';
  $rule->field_name = 'field_niacin_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['niacin_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'omega_3_decimals';
  $rule->name = 'omega_3_decimals';
  $rule->field_name = 'field_omega3_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['omega_3_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pack_height_decimals';
  $rule->name = 'pack_height_decimals';
  $rule->field_name = 'field_pack_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['pack_height_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pack_height_range';
  $rule->name = 'pack_height_range';
  $rule->field_name = 'field_pack_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['pack_height_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pack_length_decimals';
  $rule->name = 'pack_length_decimals';
  $rule->field_name = 'field_pack_length';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['pack_length_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pack_length_range';
  $rule->name = 'pack_length_range';
  $rule->field_name = 'field_pack_length';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['pack_length_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pack_width_decimals';
  $rule->name = 'pack_width_decimals';
  $rule->field_name = 'field_pack_width';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['pack_width_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pack_width_range';
  $rule->name = 'pack_width_range';
  $rule->field_name = 'field_pack_width';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['pack_width_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pallet_height_decimals';
  $rule->name = 'pallet_height_decimals';
  $rule->field_name = 'field_pallet_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['pallet_height_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pallet_height_range';
  $rule->name = 'pallet_height_range';
  $rule->field_name = 'field_pallet_height';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 1000.';
  $export['pallet_height_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pallet_weight_decimals';
  $rule->name = 'pallet_weight_decimals';
  $rule->field_name = 'field_pallet_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.001',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within three decimal places.';
  $export['pallet_weight_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'pallet_weight_range';
  $rule->name = 'pallet_weight_range';
  $rule->field_name = 'field_pallet_weight';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '0.001',
    'max' => '9999.999',
    'step' => '',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] must be between 0 and 10000.';
  $export['pallet_weight_range'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'panthothenic_acid_decimals';
  $rule->name = 'panthothenic_acid_decimals';
  $rule->field_name = 'field_pantothenic_acid_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['panthothenic_acid_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'paperb_recycle_decimals';
  $rule->name = 'paperb_recycle_decimals';
  $rule->field_name = 'field_paperb_recycle_percent';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['paperb_recycle_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'percent_juice_decimals';
  $rule->name = 'percent_juice_decimals';
  $rule->field_name = 'field_juice_percent';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['percent_juice_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'phosphorous_decimals';
  $rule->name = 'phosphorous_decimals';
  $rule->field_name = 'field_phosphorous_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['phosphorous_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'polyunsaturated_fat_decimals';
  $rule->name = 'polyunsaturated_fat_decimals';
  $rule->field_name = 'field_polyunsat_fat_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['polyunsaturated_fat_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'potassium_decimals';
  $rule->name = 'potassium_decimals';
  $rule->field_name = 'field_potassium_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['potassium_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'protein_decimals';
  $rule->name = 'protein_decimals';
  $rule->field_name = 'field_protein_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['protein_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'riboflavin_decimals';
  $rule->name = 'riboflavin_decimals';
  $rule->field_name = 'field_riboflavin_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['riboflavin_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'saturated_fat_decimals';
  $rule->name = 'saturated_fat_decimals';
  $rule->field_name = 'field_saturated_fat_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['saturated_fat_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'selenium_decimals';
  $rule->name = 'selenium_decimals';
  $rule->field_name = 'field_selenium_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['selenium_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'serving_size_decimals';
  $rule->name = 'serving_size_decimals';
  $rule->field_name = 'field_serving_size_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['serving_size_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'servings_per_container_decimals';
  $rule->name = 'servings_per_container_decimals';
  $rule->field_name = 'field_servings_per_cont_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['servings_per_container_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'sodium_decimals';
  $rule->name = 'sodium_decimals';
  $rule->field_name = 'field_sodium_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['sodium_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'soluble_fiber_decimals';
  $rule->name = 'soluble_fiber_decimals';
  $rule->field_name = 'field_soluble_fiber_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['soluble_fiber_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'sugars_decimals';
  $rule->name = 'sugars_decimals';
  $rule->field_name = 'field_sugar_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['sugars_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'thiamin_decimals';
  $rule->name = 'thiamin_decimals';
  $rule->field_name = 'field_thiamin_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['thiamin_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'total_carbs_decimals';
  $rule->name = 'total_carbs_decimals';
  $rule->field_name = 'field_total_carbohydrate_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['total_carbs_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'total_fat_decimals';
  $rule->name = 'total_fat_decimals';
  $rule->field_name = 'field_total_fat_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['total_fat_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'trans_fat_decimals';
  $rule->name = 'trans_fat_decimals';
  $rule->field_name = 'field_trans_fat_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['trans_fat_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'ubs_id_valid';
  $rule->name = 'ubs_id_valid';
  $rule->field_name = 'field_unfi_east_id';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_ubsid_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[value] is not a valid UBS ID.';
  $export['ubs_id_valid'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'Unique Item Number';
  $rule->name = 'unique_item_number';
  $rule->field_name = 'field_item_num';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_unique_validator';
  $rule->settings = array(
    'data' => 'bundle',
    'per_user' => 0,
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[value] for [field-name] already exists.';
  $export['unique_item_number'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'UPC Code ';
  $rule->name = 'upc_code_';
  $rule->field_name = 'field_upc_code_macola';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_upc_code_macola_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      18 => 0,
      19 => 0,
      20 => 0,
      16 => 0,
      17 => 0,
      21 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = 'The UPC field you have select does not have a value. That field must have a valid UPC before it can be selected.';
  $export['upc_code_'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'valid_gtin';
  $rule->name = 'valid_gtin';
  $rule->field_name = 'field_gtin';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_gtin14_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] [value] is not a valid GTIN-14';
  $export['valid_gtin'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'Valid UPC';
  $rule->name = 'valid_upc';
  $rule->field_name = 'field_upc';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'bluemarble_gtin12_validator';
  $rule->settings = array(
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] [value] is not a valid UPC-12';
  $export['valid_upc'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'Valid WBS ID';
  $rule->name = 'valid_wbs_id';
  $rule->field_name = 'field_unfi_west_id';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_pcre_validator';
  $rule->settings = array(
    'data' => '/^[0-9]{5}$/',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[value] is not a valid [field-name]';
  $export['valid_wbs_id'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'vitamin_a_decimals';
  $rule->name = 'vitamin_a_decimals';
  $rule->field_name = 'field_vitamin_a_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['vitamin_a_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'vitamin_b12_decimals';
  $rule->name = 'vitamin_b12_decimals';
  $rule->field_name = 'field_vitamin_b12_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['vitamin_b12_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'vitamin_b6_decimals';
  $rule->name = 'vitamin_b6_decimals';
  $rule->field_name = 'field_vitamin_b6_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['vitamin_b6_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'vitamin_c_decimals';
  $rule->name = 'vitamin_c_decimals';
  $rule->field_name = 'field_vitamin_c_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['vitamin_c_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'vitamin_d_decimals';
  $rule->name = 'vitamin_d_decimals';
  $rule->field_name = 'field_vitamin_d_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['vitamin_d_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'vitamin_e_decimals';
  $rule->name = 'vitamin_e_decimals';
  $rule->field_name = 'field_vitamin_e_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['vitamin_e_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'vitamin_k_decimals';
  $rule->name = 'vitamin_k_decimals';
  $rule->field_name = 'field_vitamin_k_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['vitamin_k_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'whole_grains_serving_decimals';
  $rule->name = 'whole_grains_serving_decimals';
  $rule->field_name = 'field_whole_grain_per_serving';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['whole_grains_serving_decimals'] = $rule;

  $rule = new stdClass();
  $rule->disabled = FALSE; /* Edit this to true to make a default rule disabled initially */
  $rule->api_version = 2;
  $rule->rulename = 'zinc_decimals';
  $rule->name = 'zinc_decimals';
  $rule->field_name = 'field_zinc_value';
  $rule->col = 'value';
  $rule->entity_type = 'node';
  $rule->bundle = 'product_details';
  $rule->validator = 'field_validation_numeric_validator';
  $rule->settings = array(
    'min' => '',
    'max' => '',
    'step' => '0.1',
    'bypass' => 0,
    'roles' => array(
      1 => 0,
      2 => 0,
      4 => 0,
      3 => 0,
      17 => 0,
      18 => 0,
      19 => 0,
      16 => 0,
    ),
    'errors' => 1,
  );
  $rule->error_message = '[field-name] is measured within one decimal place.';
  $export['zinc_decimals'] = $rule;

  return $export;
}
